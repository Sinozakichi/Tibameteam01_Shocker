<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-section set-bg" data-setbg="/img/breadcrumb.jpg">
    <div class="container">
        <div class="row">
            <div class="col-lg-12 text-center">
                <div class="breadcrumb__text">
                    <h2>購物車</h2>
                    <div class="breadcrumb__option">
                        <a asp-controller="Home" asp-action="Index">首頁</a>
                        <span>購物車</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Breadcrumb Section End -->
<!-- Shoping Cart Section Begin -->
<div id="app">
<section v-if="this._shoppingCart" class="shoping-cart spad">
    <div class="container">
        <div class="btn-group" role="group">
            <button class="btn btn-check" disabled>購物車已加入以下賣家商品：</button>
            <button v-for="(cart,cx) in shoppingCart" class="btn btn-check btn-outline-secondary" @@click="showCart(cx)">{{cart.sellerAccount}}</button>
        </div>
    </div>
    <div v-for="(cart,cx) in shoppingCart">
        <div v-if="show[cx]" class="container spad">
            <div class="row">
                <div class="col-lg-12">
                    <div class="shoping__cart__table">
                        <table>
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th class="shoping__product">商品</th>
                                    <th>優惠券</th>
                                    <th>單價</th>
                                    <th>數量</th>
                                    <th>小計</th>
                                    <th><span class="icon_close_alt"></span></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="(product,px) in shoppingCart[cx].products">
                                    <td class="shoping__cart__price">
                                        {{product.productId}}
                                    </td>
                                    <td class="shoping__cart__item">
                                        <img :src="path[cx][px]" style="width:100px;">
                                        <a :href="'/ShoppingCart/Product/'+product.productId"><h5>{{product.productName}}</h5></a><br>
                                        <a :href="'/ShoppingCart/ProductList/'+product.categoryId"><p>{{product.categoryName}}</p></a>
                                    </td>
                                    <td class="shoping__cart__item text-center">
                                        <select v-model="discount[cx][px][1]" v-on:change="couponSelected(cx,px,product.categoryId)" class="col-10 ">
                                            <option value="-1">選擇優惠券</option>
                                                <option v-for="(item,ix) in coupons[product.categoryId]" :value="ix" :disabled="item.disabled">
                                                #{{item.couponId}}&nbsp;&nbsp;類型：{{item.categoryName}}&nbsp;&nbsp;/&nbsp;&nbsp;折扣：×{{item.discount}}
                                            </option>
                                        </select>
                                    </td>
                                    <td class="shoping__cart__price">
                                        {{product.currency}}&nbsp;&nbsp;{{product.unitPrice}}
                                    </td>
                                    <td class="shoping__cart__quantity">
                                        <div class="quantity">
                                            <div class="pro-qty">
                                                <button class="btn btn-sm" @@click="increase('minus',cx,px)">－</button>
                                                <input type="text" v-model="product.quantity">
                                                <button class="btn btn-sm" @@click="increase('plus',cx,px)">＋</button>
                                                <p>庫存&nbsp;{{product.unitsInStock}}</p>
                                            </div>
                                        </div>
                                    </td>  
                                    <td class="shoping__cart__total">
                                        {{product.currency}}&nbsp;&nbsp;{{subtotal[cx][px] = Math.round(product.unitPrice * product.quantity * discount[cx][px][0])}}
                                    </td>
                                    <td class="shoping__cart__item__close">
                                        <span class="icon_close_alt2" title="取消訂購" @@click="deleteItem(product.productId)"></span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="shoping__cart__btns">
                        <a href="/ShoppingCart/ProductList/" class="primary-btn cart-btn">繼續選購</a>
                        <a href="#" class="primary-btn cart-btn cart-btn-right" @@click="updateShoppingCart(cx)">
                            <span class="icon_loading"></span>
                            不結帳儲存商品數量
                        </a>
                    </div>
                </div>
                <div class="col-lg-6"></div>
                <div class="col-lg-6">
                    <div class="shoping__checkout">
                        <h5>您向賣家&nbsp;&nbsp;{{cart.sellerAccount}}&nbsp;&nbsp;選購</h5>
                        <ul>
                            <li>商品 <span>共&nbsp;&nbsp;{{cart.productCount}}&nbsp;&nbsp;項</span></li>
                            <li>總計 <span>{{shoppingCart[cx].products[0].currency}}&nbsp;&nbsp;{{getTotal(subtotal[cx],shoppingCart[cx].productCount)}}</span></li>
                        </ul>
                        <a href="#" class="primary-btn" @@click="checkout(cx)">結帳</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<section v-if="!this._shoppingCart" class="checkout spad">
    <div class="container">        
        <div class="checkout__form">
            <h4>填寫訂單收件人資料</h4>
            <form id="cart" method="post" action="/Banking/Payment" hidden></form>
            <div v-for="info in userInfo" class="row">
                <div class="col-lg-8 col-md-6">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="checkout__input">
                                <p>收件人</p>
                                <input type="text" v-model="info.nickName">
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="checkout__input">
                                <p>買家帳號</p>
                                <input type="text" :value="info.id" disabled>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="checkout__input">
                                <p>電話</p>
                                <input type="text" v-model="info.phone">
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="checkout__input">
                                <p>Email</p>
                                <input type="text" v-model="info.email">
                            </div>
                        </div>
                    </div>
                    <div class="checkout__input">
                        <p>收件地址</p>
                        <select v-model="selectedAddress" type="text" class="col-12">
                            <option value="" disabled>選擇收件地址</option>
                            <option v-for="address in info.addresses" :value="address">{{address}}</option>
                        </select>
                    </div>
                    <div class="checkout__input">
                        <p>新增常用地址</p>
                        <input type="text" v-model="newAddress" placeholder="加入地址">
                    </div>
                    <div class="checkout__input">
                        <button class="site-btn" @@click="saveAddress">儲存地址</button>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="checkout__order">
                        <h4>訂單</h4>
                        <div class="checkout__order__products">商品
                            <span>小計</span>
                        </div>
                        <ul>
                            <li v-for="(product,px) in newOrder[0].products">{{product.productName}}
                                <span>{{newOrder[2][px]}}</span>
                            </li>
                        </ul>
                        <div class="checkout__order__total">總計共&nbsp;&nbsp;{{newOrder[0].productCount}}&nbsp;&nbsp;項
                            <span>
                                {{newOrder[0].products[0].currency}}&nbsp;&nbsp;{{getTotal(newOrder[2],newOrder[0].productCount)}}
                            </span>
                        </div>
                            <div class="checkout__input__checkbox">
                            <label for="onDelivery">
                                貨到付款
                                <input type="radio" id="onDelivery" value="貨到付款" v-model="payMethod">
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="checkout__input__checkbox">
                            <label for="creditCard">
                                信用卡
                                <input type="radio" id="creditCard" value="信用卡" v-model="payMethod">
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <button class="site-btn" @@click="createOrder">確認訂購</button>
                        <button class="site-btn" @@click="checkout">回上頁</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
</div>
<!-- Shoping Cart Section End -->

<script src="~/lib/vue/vue.global.prod.js"></script>
<script src="~/lib/axios/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    var baseAddress = window.location.origin;
    var vueApp = {
        data() {
            return {
                _shoppingCart: true,
                shoppingCart: [],
                coupons: {},
                total: [],
                discount: [],
                previousDiscount: [],
                subtotal: [],
                path: [],
                show: [],
                userInfo: [],
                newOrder: [],
                selectedAddress: '',
                newAddress: '',
                payMethod: '',
                message: '',
                _login: false,
                _creditCard: false
            }
        },
        mounted: function () {
            let _this = this;
            _this.getShoppingCart(0);
            _this._shoppingCart = true;
        },
        methods: {
            salert: function (message) {
                Swal.fire({
                    title: message,
                    confirmButtonText: '確定'
                });
            },
            sconfirm: function (message, type, deny) {
                return new Promise(resolve => {
                    Swal.fire({
                        title: message,
                        icon: type,
                        showDenyButton: deny == null? true: false,
                        confirmButtonText: '確定',
                        denyButtonText: '取消'
                    }).then(result => {
                        if (result.isConfirmed) result.value ? resolve(true) : resolve(false);
                    });
                });
            },
            showCart: function(index) {
                let _this = this;
                var i = 0;
                _this.shoppingCart.forEach(c => {
                    _this.show[i] = false;
                    i++;
                });
                _this.show[index] = true;
            },
            getShoppingCart: async function (index) {
                let _this = this;
                await axios.post(`${baseAddress}/ShoppingCart/GetShopping`).then(response => {
                    _this.message = response.data.message;
                    _this._login = response.data.login;
                    if (response.data.login) {
                        if (response.data.found) {
                            _this.shoppingCart = response.data.cart;
                            _this.total = [];
                            _this.discount = [];
                            _this.previousDiscount = [];
                            _this.subtotal = [];
                            _this.path = [];
                            _this.shoppingCart.forEach(c => {
                                _this.show.push(false);
                                var subtotal = 0;
                                var cart = {};
                                var previous = {};
                                var sum = {};
                                var picture = {};
                                var i = 0;
                                c.products.forEach(p => {
                                    subtotal += p.unitPrice * p.quantity;
                                    cart[i] = [1, -1, -1];
                                    previous[i] = -1;
                                    sum[i] = 0;
                                    picture[i] = `${baseAddress}/productpictures/${p.picture[0].pictureId}-${p.picture[0].picturePath}`;
                                    i++;
                                });
                                _this.total.push(subtotal);
                                _this.discount.push(cart);
                                _this.previousDiscount.push(previous);
                                _this.subtotal.push(sum);
                                _this.path.push(picture);
                            });
                            _this.show[index] = true;
                            response.data.coupon.forEach(c => {
                                _this.coupons[c.categoryId] = c.coupons;
                                _this.coupons[c.categoryId].forEach(i => {
                                    i.disabled = false;
                                });
                            });
                        }
                        else {
                            _this.salert(response.data.message);
                            _this.shoppingCart = [];
                            _this.coupons = {};
                        }
                    }                                      
                });
                if (!_this._login) {
                    var ret = await _this.sconfirm(_this.message, null, false);
                    if (ret) window.location.replace('/ShoppingCart');
                }
            },
            couponSelected: function(cartIndex, productIndex, categoryId) {
                let _this = this;
                if (_this.discount[cartIndex][productIndex][1] == '-1') {
                    _this.discount[cartIndex][productIndex][0] = 1;
                    _this.discount[cartIndex][productIndex][2] = -1;
                }
                if (_this.discount[cartIndex][productIndex][1] != -1) {
                    _this.discount[cartIndex][productIndex][0] = _this.coupons[categoryId][(_this.discount[cartIndex][productIndex][1])].discount;
                    _this.discount[cartIndex][productIndex][2] = _this.coupons[categoryId][(_this.discount[cartIndex][productIndex][1])].couponId;
                    _this.coupons[categoryId][(_this.discount[cartIndex][productIndex][1])].disabled = true;
                }
                if (_this.previousDiscount[cartIndex][productIndex] != -1) {
                    _this.coupons[categoryId][(_this.previousDiscount[cartIndex][productIndex])].disabled = false;
                }
                _this.previousDiscount[cartIndex][productIndex] = _this.discount[cartIndex][productIndex][1];
            },
            getTotal: function(subtotal, productCount) {
                let _this = this;
                var total = 0;
                for (var i = 0; i < productCount; i++) {
                    total += subtotal[i];
                }                
                return total;
            },
            updateShoppingCart: async function(index) {
                let _this = this;
                var request = {};
                request.productId = [];
                request.quantity = [];
                _this.shoppingCart[index].products.forEach(p => {
                    request.productId.push(p.productId);
                    request.quantity.push(p.quantity);                    
                });
                await axios.post(`${baseAddress}/ShoppingCart/UpdateCart`, request).then(response => {
                    _this.message = response.data.message;
                    _this._login = response.data.login;
                });
                var ret = await _this.sconfirm(_this.message, null, false);
                if (ret) {
                    if (!_this._login) window.location.replace('/ShoppingCart');
                }
            },
            increase: function(sign, cx, px) {
                let _this = this;
                if (sign == 'plus' && _this.shoppingCart[cx].products[px].quantity < _this.shoppingCart[cx].products[px].unitsInStock && _this.shoppingCart[cx].products[px].quantity > 0) {
                    _this.shoppingCart[cx].products[px].quantity = parseInt(_this.shoppingCart[cx].products[px].quantity) + 1;
                }
                if (sign == 'minus' && _this.shoppingCart[cx].products[px].quantity > 1) {
                    _this.shoppingCart[cx].products[px].quantity = parseInt(_this.shoppingCart[cx].products[px].quantity) - 1;
                }
            },
            deleteItem: async function(productId) {
                let _this = this;
                var ret = await _this.sconfirm('確定要刪除嗎？', 'warning');
                if (ret == true) {
                    await axios.post(`${baseAddress}/ShoppingCart/Delete/${productId}`).then(response => {
                        _this.message = response.data.message;
                        _this._login = response.data.login;
                    });
                    var ret2 = await _this.sconfirm(_this.message, null, false);
                    if (ret) {
                        if (!_this._login) window.location.replace('/ShoppingCart');
                        _this.getShoppingCart();
                    }
                }
            },
            checkout: async function(cartIndex) {
                let _this = this;
                _this._shoppingCart = !_this._shoppingCart;
                if(cartIndex != null) {
                    _this.newOrder = [];
                    _this.newOrder.push(_this.shoppingCart[cartIndex]);
                    _this.newOrder.push(_this.discount[cartIndex]);
                    _this.newOrder.push(_this.subtotal[cartIndex]);
                    _this.userInfo = [];
                    await axios.post(`${baseAddress}/ShoppingCart/GetUserInfo`).then(response => {
                        _this.message = response.data.message;
                        _this._login = response.data.login;
                        if (response.data.login) {
                            _this.userInfo = response.data.user;
                        }
                    });
                    if (!_this._login) {
                        var ret = await _this.sconfirm(_this.message, null, false);
                        if (ret) window.location.replace('/ShoppingCart');
                    }
                    _this.newAddress = '';
                }
            },
            saveAddress: async function() {
                let _this = this;
                if(_this.newAddress != '') {
                    var request = {};
                    request.address = _this.newAddress;
                    await axios.post(`${baseAddress}/ShoppingCart/NewAddress/`, request).then(response => {
                        _this.message = response.data.message;
                        _this._login = response.data.login;
                        if (response.data.login) {
                            _this.salert(response.data.message);
                            if (response.data.new) {
                                _this.userInfo[0].addresses.push(_this.newAddress);
                            }
                        }
                        _this.newAddress = '';
                    });
                    if (!_this._login) {
                        var ret = await _this.sconfirm(_this.message, null, false);
                        if (ret) window.location.replace('/ShoppingCart');
                    }
                }
                else _this.salert('請輸入新地址')
            },
            createOrder: async function () {
                let _this = this;
                var request = {};
                request.buyerAccount = _this.userInfo[0].id;
                request.address = _this.selectedAddress;
                request.email = _this.userInfo[0].email;
                request.buyerPhone = _this.userInfo[0].phone;
                request.payMethod = _this.payMethod;
                request.buyerName = _this.userInfo[0].nickName;
                request.orderDetails = [];
                for (var i = 0; i < _this.newOrder[0].productCount; i++) {                
                    var product = {};
                    product.productId = _this.newOrder[0].products[i].productId;
                    product.couponId = (_this.newOrder[1][i][1] != -1) ? _this.newOrder[1][i][2] : null;
                    product.quantity = _this.newOrder[0].products[i].quantity;
                    product.productName = _this.newOrder[0].products[i].productName;
                    product.unitPrice = _this.newOrder[0].products[i].unitPrice;
                    product.discount = (_this.newOrder[1][i][1] != -1) ? _this.newOrder[1][i][0] : null;
                    product.currency = _this.newOrder[0].products[i].currency;
                    request.orderDetails.push(product);
                }
                var ret = await _this.sconfirm('確認訂購？', 'question');
                if (ret == true) {
                    await axios.post(`${baseAddress}/ShoppingCart/CreateOrder/`, request).then(response => {
                        _this.message = response.data.message;
                        _this._login = response.data.login;
                        if (response.data.login) {
                            if (response.data.creditCard) {
                                _this._creditCard = response.data.creditCard;
                                const cart = document.getElementById('cart');
                                var i0 = document.createElement('input')
                                i0.setAttribute('type', "hidden");
                                i0.setAttribute('name', 'OrderId');
                                i0.value = response.data.payment.orderId;
                                cart.append(i0);
                                var i1 = document.createElement('input')
                                i1.setAttribute('type', "hidden");
                                i1.setAttribute('name', 'PayType');
                                i1.value = response.data.payment.payType;
                                cart.append(i1);
                                var i2 = document.createElement('input')
                                i2.setAttribute('type', "hidden");
                                i2.setAttribute('name', 'Amt');
                                i2.value = response.data.payment.amt;
                                cart.append(i2);
                                var i3 = document.createElement('input')
                                i3.setAttribute('type', "hidden");
                                i3.setAttribute('name', 'Email');
                                i3.value = response.data.payment.email;
                                cart.append(i3);
                                var i4 = document.createElement('input')
                                i4.setAttribute('type', "hidden");
                                i4.setAttribute('name', 'ItemDesc');
                                i4.value = response.data.payment.itemDesc;
                                cart.append(i4);
                                var i5 = document.createElement('input')
                                i5.setAttribute('type', "hidden");
                                i5.setAttribute('name', 'OrderComment');
                                i5.value = response.data.payment.orderComment;
                                cart.append(i5);
                            }
                        }                        
                    });
                    var ret2 = await _this.sconfirm(_this.message, null, false);
                    if (ret2) {
                        if (!_this._login) window.location.replace('/ShoppingCart');
                        if (_this._login && _this._creditCard) document.getElementById('cart').submit();
                    }
                    _this.getShoppingCart(0);
                    _this._shoppingCart = true;
                }
            }
        }
    };
    var app = Vue.createApp(vueApp).mount('#app');
</script>